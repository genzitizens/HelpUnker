-- liquibase formatted sql

-- =====================================================================
-- 001 - Enums
-- =====================================================================
-- changeset unker:001-create-enums splitStatements:false endDelimiter:$$
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'request_status') THEN
    CREATE TYPE request_status AS ENUM ('OPEN','ASSIGNED','ONGOING','COMPLETED','CANCELLED');
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
    CREATE TYPE user_role AS ENUM ('ELDERLY','VOLUNTEER','ADMIN');
  END IF;
END
$$;

-- Optional helper table (no rows; just a placeholder to anchor enum docs)
-- changeset unker:001a-enum-anchor
CREATE TABLE IF NOT EXISTS app_enums (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
);


-- =====================================================================
-- 002 - Users
-- =====================================================================
-- changeset unker:002-users
CREATE TABLE IF NOT EXISTS users (
  id              UUID PRIMARY KEY,
  phone           VARCHAR(32),
  email           VARCHAR(255),
  display_name    VARCHAR(120) NOT NULL,
  role            user_role     NOT NULL,
  volunteer_verified BOOLEAN    NOT NULL DEFAULT FALSE,
  password_hash   VARCHAR(255),
  created_at      TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
  updated_at      TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
  version         BIGINT        NOT NULL DEFAULT 0
);

-- changeset unker:002a-users-uniques
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'uq_users_email'
  ) THEN
    ALTER TABLE users ADD CONSTRAINT uq_users_email UNIQUE (email);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'uq_users_phone'
  ) THEN
    ALTER TABLE users ADD CONSTRAINT uq_users_phone UNIQUE (phone);
  END IF;
END
$$;

-- changeset unker:002b-users-indexes
CREATE INDEX IF NOT EXISTS ix_users_role ON users(role);


-- =====================================================================
-- 003 - Requests
-- =====================================================================
-- changeset unker:003-requests
CREATE TABLE IF NOT EXISTS requests (
  id             UUID PRIMARY KEY,
  elderly_id     UUID NOT NULL,
  title          VARCHAR(160) NOT NULL,
  details        TEXT NOT NULL,
  status         request_status NOT NULL DEFAULT 'OPEN',
  category       VARCHAR(64),
  location_lat   NUMERIC(9,6),   -- WGS84 latitude
  location_lng   NUMERIC(9,6),   -- WGS84 longitude
  address        VARCHAR(255),
  created_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  version        BIGINT NOT NULL DEFAULT 0
);

-- changeset unker:003a-requests-fk
ALTER TABLE requests
  ADD CONSTRAINT fk_requests_elderly
  FOREIGN KEY (elderly_id) REFERENCES users(id) ON DELETE CASCADE;

-- changeset unker:003b-requests-indexes
CREATE INDEX IF NOT EXISTS ix_requests_status_created
  ON requests(status, created_at);


-- =====================================================================
-- 004 - Request Photos
-- =====================================================================
-- changeset unker:004-request-photos
CREATE TABLE IF NOT EXISTS request_photos (
  id           UUID PRIMARY KEY,
  request_id   UUID NOT NULL,
  url          VARCHAR(512) NOT NULL,
  content_type VARCHAR(100),
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- changeset unker:004a-request-photos-fk
ALTER TABLE request_photos
  ADD CONSTRAINT fk_request_photos_request
  FOREIGN KEY (request_id) REFERENCES requests(id) ON DELETE CASCADE;

-- changeset unker:004b-request-photos-index
CREATE INDEX IF NOT EXISTS ix_request_photos_req
  ON request_photos(request_id);


-- =====================================================================
-- 005 - Assignments
-- =====================================================================
-- changeset unker:005-assignments
CREATE TABLE IF NOT EXISTS assignments (
  id            UUID PRIMARY KEY,
  request_id    UUID NOT NULL,
  volunteer_id  UUID NOT NULL,
  accepted_at   TIMESTAMPTZ,
  arrived_at    TIMESTAMPTZ,
  completed_at  TIMESTAMPTZ,
  cancelled_at  TIMESTAMPTZ,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  version       BIGINT NOT NULL DEFAULT 0
);

-- changeset unker:005a-assignments-fk
ALTER TABLE assignments
  ADD CONSTRAINT fk_assignments_request
  FOREIGN KEY (request_id) REFERENCES requests(id) ON DELETE CASCADE;

ALTER TABLE assignments
  ADD CONSTRAINT fk_assignments_volunteer
  FOREIGN KEY (volunteer_id) REFERENCES users(id) ON DELETE CASCADE;

-- Only one (current) assignment per request
-- changeset unker:005b-assignments-unique
ALTER TABLE assignments
  ADD CONSTRAINT uq_assignments_request_one_active
  UNIQUE (request_id);

-- changeset unker:005c-assignments-index
CREATE INDEX IF NOT EXISTS ix_assignments_volunteer
  ON assignments(volunteer_id);


-- =====================================================================
-- 006 - Device Tokens (for push notifications)
-- =====================================================================
-- changeset unker:006-device-tokens
CREATE TABLE IF NOT EXISTS device_tokens (
  id           UUID PRIMARY KEY,
  user_id      UUID NOT NULL,
  provider     VARCHAR(16),           -- FCM/APNS
  token        VARCHAR(2048) NOT NULL,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_seen_at TIMESTAMPTZ
);

-- changeset unker:006a-device-tokens-fk-index
ALTER TABLE device_tokens
  ADD CONSTRAINT fk_device_tokens_user
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

CREATE INDEX IF NOT EXISTS ix_device_tokens_user
  ON device_tokens(user_id);


-- =====================================================================
-- 007 - Outbox (transactional events)
-- =====================================================================
-- changeset unker:007-outbox
CREATE TABLE IF NOT EXISTS outbox_events (
  id              BIGSERIAL PRIMARY KEY,
  aggregate_type  VARCHAR(64)  NOT NULL,
  aggregate_id    VARCHAR(64)  NOT NULL,
  event_type      VARCHAR(64)  NOT NULL,
  payload         JSONB        NOT NULL,
  created_at      TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
  processed_at    TIMESTAMPTZ
);

-- changeset unker:007a-outbox-index
CREATE INDEX IF NOT EXISTS ix_outbox_created
  ON outbox_events(created_at);


-- =====================================================================
-- Triggers / housekeeping
-- =====================================================================
-- changeset unker:999-updated-at-triggers splitStatements:false endDelimiter:$$
DO $$
BEGIN
  -- update updated_at on UPDATE for users
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_users_touch') THEN
    CREATE OR REPLACE FUNCTION fn_touch_users() RETURNS TRIGGER AS $BODY$
    BEGIN
      NEW.updated_at := NOW();
      RETURN NEW;
    END;
    $BODY$ LANGUAGE plpgsql;

    CREATE TRIGGER trg_users_touch
      BEFORE UPDATE ON users
      FOR EACH ROW
      EXECUTE FUNCTION fn_touch_users();
  END IF;

  -- update updated_at on UPDATE for requests
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_requests_touch') THEN
    CREATE OR REPLACE FUNCTION fn_touch_requests() RETURNS TRIGGER AS $BODY$
    BEGIN
      NEW.updated_at := NOW();
      RETURN NEW;
    END;
    $BODY$ LANGUAGE plpgsql;

    CREATE TRIGGER trg_requests_touch
      BEFORE UPDATE ON requests
      FOR EACH ROW
      EXECUTE FUNCTION fn_touch_requests();
  END IF;
END
$$;

-- =====================================================================
-- Notes:
-- - For PostGIS later, replace location_lat/lng with GEOGRAPHY(POINT,4326),
--   add: CREATE EXTENSION IF NOT EXISTS postgis;
--   and index: CREATE INDEX ... USING GIST (geog_column);
--   then use ST_DWithin for radius queries.
-- =====================================================================
